# -*- mode: ruby -*-
# vi: set ft=ruby :

# All Vagrant configuration is done below. The "2" in Vagrant.configure
# configures the configuration version (we support older styles for
# backwards compatibility). Please don't change it unless you know what
# you're doing.
PUBLIC_KEY=File.read("\id_rsa.pub").strip
Vagrant.configure(2) do |config|
  # The most common configuration options are documented and commented below.
  # For a complete reference, please see the online documentation at
  # https://docs.vagrantup.com.

  # Every Vagrant development environment requires a box. You can search for
  # boxes at https://atlas.hashicorp.com/search.
  config.vm.box = "ubuntu/xenial64"

  config.vm.define "vm1" do |vm1|
    vm1.vm.network "private_network", ip: "10.0.1.10"
    vm1.vm.network "public_network"
    vm1.vm.provision "file", source: "\Genesis_Node.yml", destination: "Genesis_Node.yml"    
  end

  config.vm.define "vm2" do |vm2|
    vm2.vm.network "private_network", ip: "10.0.1.11"
    vm2.vm.network "public_network"
    vm2.vm.provision "file", source: "\Secondary_Node1.yml", destination: "Secondary_Node.yml"           
  end

  config.vm.define "vm3" do |vm3|
    vm3.vm.network "private_network", ip: "10.0.1.12"
    vm3.vm.network "public_network" 
    vm3.vm.provision "file", source: "\Secondary_Node2.yml", destination: "Secondary_Node.yml"    
  end

  config.vm.define "vm4" do |vm4|
    vm4.vm.network "private_network", ip: "10.0.1.13"
    vm4.vm.network "public_network" 
    vm4.vm.provision "file", source: "\id_rsa", destination: "~/.ssh/id_rsa"
    vm4.vm.provision "file", source: "\id_rsa.pub", destination: "~/.ssh/id_rsa.pub"
    vm4.vm.provision "file", source: "\playbook.yml", destination: "playbook.yml"  
    vm4.vm.provision "file", source: "\hosts", destination: "hosts"
  end

  # Disable automatic box update checking. If you disable this, then
  # boxes will only be checked for updates when the user runs
  # `vagrant box outdated`. This is not recommended.
  # config.vm.box_check_update = false

  # Create a forwarded port mapping which allows access to a specific port
  # within the machine from a port on the host machine. In the example below,
  # accessing "localhost:8080" will access port 80 on the guest machine.
  # config.vm.network "forwarded_port", guest: 80, host: 8080

  # Create a private network, which allows host-only access to the machine
  # using a specific IP.

  # Create a public network, which generally matched to bridged network.
  # Bridged networks make the machine appear as another physical device on
  # your network.
  # config.vm.network "public_network"

  # Share an additional folder to the guest VM. The first argument is
  # the path on the host to the actual folder. The second argument is
  # the path on the guest to mount the folder. And the optional third
  # argument is a set of non-required options.
  # config.vm.synced_folder "../data", "/vagrant_data"

  # Provider-specific configuration so you can fine-tune various
  # backing providers for Vagrant. These expose provider-specific options.
  # Example for VirtualBox:
  #
   config.vm.provider "virtualbox" do |vb|
     # Display the VirtualBox GUI when booting the machine
     vb.gui = false
  #
     # Customize the amount of memory on the VM:
     vb.memory = "1024"
   end
  #
  # View the documentation for the provider you are using for more
  # information on available options.

  # Define a Vagrant Push strategy for pushing to Atlas. Other push strategies
  # such as FTP and Heroku are also available. See the documentation at
  # https://docs.vagrantup.com/v2/push/atlas.html for more information.
  # config.push.define "atlas" do |push|
  #   push.app = "YOUR_ATLAS_USERNAME/YOUR_APPLICATION_NAME"
  # end

  # Enable provisioning with a shell script. Additional provisioners such as
  # Puppet, Chef, Ansible, Salt, and Docker are also available. Please see the
  # documentation for more information about their specific syntax and use.
  config.vm.provision "shell", inline: <<-SHELL
    sudo apt-get update
    sudo apt-get upgrade -y
    echo "#{PUBLIC_KEY}">>/home/ubuntu/.ssh/authorized_keys
    echo "#{PUBLIC_KEY}">>/home/sawtooth/.ssh/authorized_keys
    echo "#{PUBLIC_KEY}">>/home/vagrant/.ssh/authorized_keys
    chmod 400 /home/vagrant/.ssh/id_rsa
    sudo apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys 8AA7AF1F1091A5FD
    sudo add-apt-repository 'deb [arch=amd64] http://repo.sawtooth.me/ubuntu/1.0/stable xenial universe'
    sudo curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -
    sudo apt-key fingerprint 0EBFCD88
    sudo add-apt-repository "deb [arch=amd64] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable"
    sudo apt-add-repository ppa:ansible/ansible
    sudo apt-get update
    sudo apt-get install apt-transport-https ca-certificates curl software-properties-common -y
    sudo apt-get install -y sawtooth
    sudo apt-get install docker-ce -y
    sudo curl -L https://github.com/docker/compose/releases/download/1.21.2/docker-compose-`uname -s`-`uname -m` -o /usr/local/bin/docker-compose
    sudo chmod +x /usr/local/bin/docker-compose
    sudo apt-get install ansible -y
    sawtooth keygen
  SHELL

end
